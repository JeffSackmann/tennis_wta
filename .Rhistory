x[i,] <- rnorm(2,3,1)
}else{
x[i,] <- rnorm(2,-3,1)
}
}
View(x)
for (i in 1:n1){
if(y[i]==1){
x[i,] <- rnorm(2,3,1)
}else{
x[i,] <- rnorm(2,-3,1)
}
}
for (i in 1:n1){
if(y[i]==1){
x[i,] <- rbind(rnorm(2,3,1),1)
}else{
x[i,] <- rbind(rnorm(2,-3,1),1)
}
}
n1 <- 100
n2 <-2
y <- sample(c(-1,1), n1, replace=TRUE)
x <- matrix(1, n1, n2)
for (i in 1:n1){
if(y[i]==1){
x[i,] <- rnorm(2,3,1)
}else{
x[i,] <- rnorm(2,-3,1)
}
}
n1 <- 100
n2 <-2
y <- sample(c(-1,1), n1, replace=TRUE)
x <- matrix(1, n1, n2+1)
for (i in 1:n1){
if(y[i]==1){
x[i,] <- cbind(rnorm(2,3,1),1)
}else{
x[i,] <- cbind(rnorm(2,-3,1),1)
}
}
x <- cbind(x, rep(1, n1))
View(x)
n1 <- 100
n2 <-2
y <- sample(c(-1,1), n1, replace=TRUE)
x <- matrix(1, n1, n2)
for (i in 1:n1){
if(y[i]==1){
x[i,] <- rnorm(2,3,1)
}else{
x[i,] <- rnorm(2,-3,1)
}
}
x <- cbind(x, rep(1, n1))
View(x)
perceptron <- function(niter, n, x, y, w){
eta <- 1
for (iter in 1:niter){
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) < 0){
w <- w + etai*x[,i]*y[i]
}
}
}
}
perceptron <- function(niter, n, x, y, w){
eta <- 1
for (iter in 1:niter){
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) < 0){
w <- w + etai*x[,i]*y[i]
}
}
}
return(as.matrix(w))
}
perceptron <- function(niter, n, x, y){
w <- rnorm(dim(x)[2])
eta <- 1
for (iter in 1:niter){
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) < 0){
w <- w + etai*x[,i]*y[i]
}
}
}
return(as.matrix(w))
}
f <- perceptron(10,100,x,y)
perceptron <- function(niter, n, x, y){
w <- rnorm(dim(x)[2])
eta <- 1
for (iter in 1:niter){
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% t(x[,i])) < 0){
w <- w + etai*t(x[,i])*y[i]
}
}
}
return(as.matrix(w))
}
f <- perceptron(10,100,x,y)
n1 <- 100
n2 <-2
y <- sample(c(-1,1), n1, replace=TRUE)
x <- matrix(1, n1, n2)
for (i in 1:n1){
if(y[i]==1){
x[i,] <- rnorm(2,3,1)
}else{
x[i,] <- rnorm(2,-3,1)
}
}
x <- t(cbind(x, rep(1, n1)))
View(x)
plot(x[,1], x[,2])
plot(x[1,], x[1,])
plot(x[1,], x[2,])
perceptron <- function(niter, n, x, y){
w <- rnorm(dim(x)[2])
eta <- 1
for (iter in 1:niter){
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) < 0){
w <- w + etai*x[,i]*y[i]
}
}
}
return(as.matrix(w))
}
f <- perceptron(10,100,x,y)
w <- rnorm(dim(x)[2])
perceptron <- function(niter, n, x, y){
w <- rnorm(dim(x)[1])
eta <- 1
for (iter in 1:niter){
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) < 0){
w <- w + etai*x[,i]*y[i]
}
}
}
return(as.matrix(w))
}
f <- perceptron(10,100,x,y)
SVM <- function(niter, n, x, y, c){
w <- rnorm(dim(x)[1])
eta <- 1
for (iter in 1:niter) {
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) <= 1){
w <- w + etai*x[,i]*y[i] - c*etai*w
}
}
}
return(as.matrix(w))
}
f2 <- SVM(10,100,x,y,0.2)
x1 <- seq(-4.5,4.5)
x2 <- (-w[3]-w[1]*x1)/x[2]
lines(x1,x2)
SVM <- function(niter, n, x, y, c){
w <- rnorm(dim(x)[1])
eta <- 1
for (iter in 1:niter) {
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) <= 1){
w <- w + etai*x[,i]*y[i] - c*etai*w
}
}
}
return(as.matrix(w))
}
f2 <- SVM(10,100,x,y,0.2)
x1 <- seq(-4.5,4.5)
x2 <- (-w[3]-w[1]*x1)/x[2]
plot(x[1,], x[2,])
lines(x1,x2)
f1 <- perceptron(10,20,x,y)
x1 <- seq(-4.5,4.5)
x2 <- (-w[3]-w[1]*x1)/x[2]
plot(x[1,], x[2,])
lines(x1,x2)
x2 <- (-w[3]+w[1]*x1)/x[2]
plot(x[1,], x[2,])
lines(x1,x2)
perceptron <- function(niter, n, x, y){
w <- rnorm(dim(x)[1])
eta <- 1
for (iter in 1:niter){
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) < 0){
w <- w + etai*(x[,i]/(norm(x[,i]))^2)*y[i]
}
}
}
return(as.matrix(w))
}
f1 <- perceptron(10,20,x,y)
x1 <- seq(-4.5,4.5)
x2 <- (-w[3]-w[1]*x1)/x[2]
plot(x[1,], x[2,])
lines(x1,x2)
x2 <- (-w[3]+w[1]*x1)/x[2]
x2 <- (-w[3]+w[1]*x1)/x[2]
plot(x[1,], x[2,])
lines(x1,x2)
SVM <- function(niter, n, x, y, c){
w <- rnorm(dim(x)[1])
eta <- 1
for (iter in 1:niter) {
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) <= 1){
w <- w + etai*x[,i]*y[i] - c*etai*w
}
}
}
return(as.matrix(w))
}
f2 <- SVM(10,100,x,y,0.2)
x1 <- seq(-4.5,4.5)
x2 <- (-w[3]+w[1]*x1)/x[2]
plot(x[1,], x[2,])
lines(x1,x2)
perceptron <- function(niter, n, x, y){
w <- rnorm(dim(x)[1])
eta <- 1
for (iter in 1:niter){
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) < 0){
w <- w + etai*(x[,i]%*%y[i])
}
}
}
return(as.matrix(w))
}
f1 <- perceptron(10,20,x,y)
x1 <- seq(-4.5,4.5)
x2 <- (-w[3]+w[1]*x1)/x[2]
perceptron <- function(niter, n, x, y){
w <- rnorm(dim(x)[1])
eta <- 1
for (iter in 1:niter){
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) < 0){
w <- w + etai*x[,i]*y[i]
}
}
}
return(as.matrix(w))
}
f1 <- perceptron(10,1000,x,y)
x1 <- seq(-4.5,4.5)
x2 <- (-w[3]-w[1]*x1)/x[2]
f1 <- perceptron(10,100,x,y)
x1 <- seq(-4.5,4.5)
x2 <- (-w[3]-w[1]*x1)/x[2]
perceptron <- function(niter, n, x, y){
w <- rnorm(dim(x)[1])
eta <- 1
for (iter in 1:niter){
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) < 0){
w <- w + etai*x[,i]*y[i]
}
}
}
return(as.matrix(w))
}
f1 <- perceptron(10,100,x,y)
x1 <- seq(-4.5,4.5)
x2 <- (-w[3]-w[1]*x1)/x[2]
plot(x[1,], x[2,])
lines(x1,x2)
SVM <- function(niter, n, x, y, c){
w <- rnorm(dim(x)[1])
eta <- 1
for (iter in 1:niter) {
for (i in 1:n){
etai <- eta/iter
if (y[i]*(w %*% x[,i]) <= 1){
w <- w + etai*(x[,i]/(norm(x[,1]))^2)*y[i] - c*etai*w[1,2]
}
}
}
return(as.matrix(w))
}
f2 <- SVM(10,100,x,y,0.2)
x1 <- seq(-4.5,4.5)
x2 <- (-w[3]-w[1]*x1)/x[2]
plot(x[1,], x[2,])
lines(x1,x2)
x2 <- (-w[3]+w[1]*x1)/x[2]
plot(x[1,], x[2,])
lines(x1,x2)
x <- seq(1,12, by=1)
y <- x^2
b <- c(1,1,1)
gamma <- 0.0005
n <- length(x)
partial <- matrix(0, nrow = n, ncol= 4)
x <- seq(1,12, by=1)
y <- x^2
b <- c(1,1,1)
gam <- 0.0005
n <- length(x)
partial <- matrix(0, nrow = n, ncol= 4)
for (j in 1:iter){
for (i in 1:n){
r_grad <- r1(b[1],b[2],b[3],x[i],y[i])
partial[i,4] <- as.numeric(r_grad)
partial[i,1:3] <- attr(r_grad,'gradient')[1:3]
b <- b - gam*partial[i,1:3]
}
f_track[j,2] <- f(b,x,y)
if (j %% 1000 == 0) cat('j=',j,',f_value=',f_track[j,2],',b=',b,'\n')
}
iter <- 10000
for (j in 1:iter){
for (i in 1:n){
r_grad <- r1(b[1],b[2],b[3],x[i],y[i])
partial[i,4] <- as.numeric(r_grad)
partial[i,1:3] <- attr(r_grad,'gradient')[1:3]
b <- b - gam*partial[i,1:3]
}
f_track[j,2] <- f(b,x,y)
if (j %% 1000 == 0) cat('j=',j,',f_value=',f_track[j,2],',b=',b,'\n')
}
x <- seq(1,12, by=1)
y <- x^2
iter <- 10000
f_track <- matrix(0, iter, 2) #value of functions
f <- function(b, x, y){
sum((y - b[1]/(1+b[2]*exp(-b[3]/100*x)))^2)
}
r1 <- deriv(expression( (y - b1/(1+b2*exp(-b3/100*x)))^2),
namevec = c('b1','b2','b3','x','y'), function.arg=T) #grad of residue
b <- c(10,10,10) # beta initial
gam <- 0.1/(2^(1:10))  #to try in line search
f_val <- numeric(length(gam)) # values of f in line search
n <- length(x)
partial <- matrix(0, nrow=n,ncol=4) # partial derivatives for each data point
for (j in 1:iter){
for (i in 1:n){
r_grad <- r1(b[1],b[2],b[3],x[i],y[i])
partial[i,4] <- as.numeric(r_grad)
partial[i,1:3] <- attr(r_grad,'gradient')[1:3]
b <- b - gam*partial[i,1:3]
}
f_track[j,2] <- f(b,x,y)
if (j %% 1000 == 0) cat('j=',j,',f_value=',f_track[j,2],',b=',b,'\n')
}
warnings()
library(dash)
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
library(plotly)
x <- seq(0,10,0.1)
y <- sin(x)
fig <- plot_ly(x = x, y = y)
fig
dnorm(0.5)
dnorm(0)
qnorm(0)
qnorm(0.5)
x <- runif(100)
y <- qnorm(x)
hist(y)
x <- runif(10000)
y <- qnorm(x)
hist(y)
qqplot(y)
temp <- matrix(0, 5, 5)
diag(temp) <- 1
temp[1,2] <- 0.5
temp[2,1] <- 0.5
temp[3,2] <- 0.5
temp[2,3] <- 0.5
temp[4,3] <- 0.5
temp[3,4] <- 0.5
temp[5,4] <- 0.5
temp[4,5] <- 0.5
solve(temp)
temp
#no players
K <- 10
#generate lambdas
lambda <- runif(K, min=0, max=5)
lambda[1] <- 5 #roger federer
lambda[2] <- 2 #(rev) ed davis
#generate n
n <- matrix(round(runif(K^2, min=10, max=100)), K, K)
diag(n) <- 0
n <- round((n+t(n))/2)
View(n)
#draw function
lambda_draw <- function(n, lam1, lam2) {
rands <- runif(n)
p_win <- lam1/(lam1+lam2)
return(sum(rands<p_win))
}
#generate w - row beats column
w <- matrix(0, K, K)
no_matches <- apply(n, 1, sum)
for (p1_ind in 1:K) {
for (p2_ind in (1:K)[1:K != p1_ind]) {
no_matches_temp <- n[p1_ind, p2_ind]
p1_wins <- lambda_draw(no_matches_temp, lambda[p1_ind], lambda[p2_ind])
w[p1_ind, p2_ind] <- p1_wins
w[p2_ind, p1_ind] <- no_matches_temp - p1_wins
}
}
w
EM_step <- function(Z,lambda,W,a,b,K,n){
# Expectation
for(i in 1:K){
for(j in 1:K){
if(n[i,j]>0){
Z[i,j] <- rgamma(1,n[i,j],lambda[i]+lambda[j])}
}
}
# Compute sum of upper and lower diagonals of Z
upper <- sum(Z[upper.tri(Z, diag = FALSE)])
lower <- sum(Z[lower.tri(Z, diag = FALSE)])
#Maximisation
for(i in 1:K){
lambda[i] <- rgamma(1,a + sum(W[i,]),b + upper + lower)
}
return(list("z"=Z,"lam"=lambda))
}
EM <- function(W,nsteps,a,b){
# Initialise Variables
K <- length(W[1,])
n <- matrix(0,nrow=K,ncol=K)
n <- W + t(W)
lambda <- runif(K,0,1)
Z <- matrix(0,nrow = K,ncol=K)
for(t in 1:nsteps){
step <- EM_step(Z,lambda,W,a,b,K,n)
Z <- step$z
lambda <- step$lam
return(lambda)
}
}
rescale <- function(l,lambda)l* lambda[1]/l[1]
setwd("~/PhD/First Year/Statistical Computing/tennis_wta")
list.files
list.files()
list.files(R/)
list.files("R/")
list.files("tennis-wta/tennis-wta")
list.files("tennis-wta/")
list.files("tennis_wta/")
x = list.files("tennis_wta/")
setwd("~/PhD/First Year/Statistical Computing/tennis_wta")
list.files("tennis_wta/")
x <- list.files("tennis_wta/")
save.image("~/PhD/First Year/Statistical Computing/tennis_wta/temp.RData")
read("thing.txt")
read.dlim("thing.txt")
read.delim("thing.txt")
thing <- read.delim("thing.txt")
View(thing)
thing <- read.delim("thing.txt", header=FALSE)
length(thing)
length(as.matrix(thing))
thing <- as.matrix(read.delim("thing.txt", header=FALSE))
source('~/PhD/First Year/Statistical Computing/tennis_wta/R/tennis.R', echo=TRUE)
thing_list[[1]]="hi"
for (count in 1:length(thing)) {
thing_list[[i]] <- read.csv(thing[count])
}
thing[1]
x <- list.files("tennis_wta/")
thing <- as.matrix(read.delim("thing.txt", header=FALSE))
thing_list <- vector("list")
thing[1]
thing <- as.matrix(read.delim("rel-files.txt", header=FALSE))
thing[1]
thing[2]
thing[10]
x <- list.files("tennis_wta/")
thing <- as.matrix(read.delim("rel-files.txt", header=FALSE))
thing_list <- vector("list")
for (count in 1:length(thing)) {
thing_list[[i]] <- read.csv(thing[count])
}
thing_list[[i]] <- read.csv(cat("tennis_wta", thing[count]))
cat("tennis_wta", count[1])
cat("tennis_wta", thing[`1]`])
cat("tennis_wta", thing[1])
for (count in 1:length(thing)) {
thing_list[[i]] <- read.csv(cat("tennis_wta/", thing[count]))
}
thing_list[[i]] <- read.csv(cat("tennis_wta/",thing[count]))
