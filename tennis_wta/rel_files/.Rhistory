}
# # check for missing surface types
# count_clay <- 0
# count_grass <- 0
# count_carpet <- 0
# count_hard <- 0
# count_weird <- 0
# counter <- 0
# indexing <- rep(0, 593)
# for (i in 1:length(melted_files$surface)) {
#   if (melted_files$surface[i]=="Clay") {
#     count_clay <- count_clay + 1
#   } else if (melted_files$surface[i]=="Grass") {
#     count_grass <- count_grass + 1
#   } else if (melted_files$surface[i]=="Carpet") {
#     count_carpet <- count_carpet + 1
#   } else if (melted_files$surface[i]=="Hard") {
#     count_hard <- count_hard + 1
#   } else {
#     counter <- counter+1
#     indexing[counter] <- i
#     count_weird <- count_weird+1
#   }
# }
# surfaces <- unique(melted_files[-indexing,]$surface)
# no_surfaces <- length(unique(surfaces))
##new stuff
players <- unique(c(melted_files$winner_id, melted_files$loser_id))
no_players <- length(players)
w <- matrix(0, no_players, no_players)
w <- as.data.frame(w)
row.names(w) <- players
colnames(w) <- row.names(w)
for (i in 1:no_players) {
player <- players[i]
win_ind <- which(row.names(w)==player)
los_ids <- melted_files$loser_id[which(melted_files$winner_id==player)]
for (j in 1:length(los_ids)) {
loser <- los_ids[j]
los_ind <- which(row.names(w)==loser)
w[win_ind, los_ind] <- w[win_ind, los_ind] + 1
}
}
n <- w+t(w)
head(n)
View(w)
View(w)
View(n)
library(profvis)
profvis({
for (i in 1:no_players) {
player <- players[i]
win_ind <- which(row.names(w)==player)
los_ids <- melted_files$loser_id[which(melted_files$winner_id==player)]
for (j in 1:length(los_ids)) {
loser <- los_ids[j]
los_ind <- which(row.names(w)==loser)
w[win_ind, los_ind] <- w[win_ind, los_ind] + 1
}
}
})
library(profvis)
profvis({
for (i in 1:no_players) {
player <- players[i]
win_ind <- which(row.names(w)==player)
los_ids <- melted_files$loser_id[which(melted_files$winner_id==player)]
for (j in 1:length(los_ids)) {
loser <- los_ids[j]
los_ind <- which(players==loser)
w[win_ind, los_ind] <- w[win_ind, los_ind] + 1
}
}
})
for (i in 1:no_players) {
player <- players[i]
win_ind <- which(row.names(w)==player)
los_ids <- melted_files$loser_id[which(melted_files$winner_id==player)]
for (j in 1:length(los_ids)) {
loser <- los_ids[j]
los_ind <- which(players==loser)
w[win_ind, los_ind] <- w[win_ind, los_ind] + 1
}
}
n <- w+t(w)
file_list
test_file <- file_list[[no_files]]
no_files <- length(file_list)
test_file <- file_list[[no_files]]
file_list <- file_list[[-no_files]]
file_list <- file_list[[1:(no_files-1)]]
file_list <- file_list[1:(no_files-1)]
file_list
for (file_index in 1:no_files) {
temp_file <- read.csv(file_list[[file_index]])
reduced_file <- subset(temp_file, select = c(surface, winner_id, loser_id))
if (file_index==1) {
melted_files <- reduced_file
} else {
melted_files <- rbind(melted_files, reduced_file)
}
}
for (file_index in 1:(no_files-1)) {
temp_file <- read.csv(file_list[[file_index]])
reduced_file <- subset(temp_file, select = c(surface, winner_id, loser_id))
if (file_index==1) {
melted_files <- reduced_file
} else {
melted_files <- rbind(melted_files, reduced_file)
}
}
reduced_test_file <- subset(read.csv(test_file), select = c(surface, winner_id, loser_id))
reduced
reduced_test_file
reduced_test_file <- subset(read.csv(test_file), select = c(surface, winner_id, loser_id))
# # check for missing surface types
count_clay <- 0
count_grass <- 0
count_carpet <- 0
count_hard <- 0
count_weird <- 0
counter <- 0
indexing <- rep(0, 593)
for (i in 1:length(melted_files$surface)) {
if (melted_files$surface[i]=="Clay") {
count_clay <- count_clay + 1
} else if (melted_files$surface[i]=="Grass") {
count_grass <- count_grass + 1
} else if (melted_files$surface[i]=="Carpet") {
count_carpet <- count_carpet + 1
} else if (melted_files$surface[i]=="Hard") {
count_hard <- count_hard + 1
} else {
counter <- counter+1
indexing[counter] <- i
count_weird <- count_weird+1
}
}
data <- melted_files
types <- data$surface
types
types <- unique(data$surface)
types
length(types)
counts <- as.data.frame(counts)
#types <- unique(data$surface)
counts <- rep(0, length(list_types))
counts <- as.data.frame(counts)
list_types=c("Grass", "Hard", "Carpet", "Clay")
#types <- unique(data$surface)
counts <- rep(0, length(list_types))
counts <- as.data.frame(counts)
counts
#types <- unique(data$surface)
counts <- t(rep(0, length(list_types)))
counts <- as.data.frame(counts)
row.names(counts) <- list_types
row.names(counts) <- list_types
rownames(counts) <- list_types
counts
colnames(counts) <- list_types
counts
counts$Grass
#types <- unique(data$surface)
counts <- rep(0, length(list_types)+1)
counts <- as.data.frame(counts)
row.names(counts) <- c(list_types, "Other")
counts
length(data)
length(t(data))
dim(data)
rep(0,2)
rep(0,2)[3] <- 3
x <- rep(0,2)
x[3] <-  2
x <- rep(0,2)
x
x[3] <-  2
x
x <- 2
x[2] <- 3
list(x, win_ind)
break_surfaces <- function(data, list_types) {
counts <- rep(0, length(list_types)+1)
counts <- as.data.frame(counts)
row.names(counts) <- c(list_types, "Other")
other_indexes <- 0
for (i in 1:dim(data)[1]) {
flag = FALSE
for (j in 1:length(list_types)) {
if(data$surfaces[i]==list_types[j]) {
flag = TRUE
counts$list_types[j] = counts$list_types[j] + 1
}
}
if (flag == FALSE) {
counts$Other <- counts$Other + 1
other_indexes[counts$Other] <- i
}
}
return(list(counts, other_indexes))
}
x <- break_surfaces(data, c("Grass", "Clay", "Carpet", "Hard"))
data$surfaces[2]
row.names(surfaces)
row.names(data)
colnames(data)
u
break_surfaces <- function(data, list_types) {
counts <- rep(0, length(list_types)+1)
counts <- as.data.frame(counts)
row.names(counts) <- c(list_types, "Other")
other_indexes <- 0
for (i in 1:dim(data)[1]) {
flag = FALSE
for (j in 1:length(list_types)) {
if(data$surface[i]==list_types[j]) {
flag = TRUE
counts$list_types[j] = counts$list_types[j] + 1
}
}
if (flag == FALSE) {
counts$Other <- counts$Other + 1
other_indexes[counts$Other] <- i
}
}
return(list(counts, other_indexes))
}
x <- break_surfaces(data, c("Grass", "Clay", "Carpet", "Hard"))
x <- break_surfaces(data, c("Grass", "Clay", "Carpet", "Hard"))
list_types
counts <- rep(0, length(list_types)+1)
counts <- as.data.frame(counts)
row.names(counts) <- c(list_types, "Other")
other_indexes <- 0
setwd("~/Documents/PhD/First Year/Statistical Computing/tennis_wta/tennis_wta/rel_files")
file_list = list.files(pattern="*.csv")
no_files <- length(file_list)
test_file <- file_list[[no_files]]
file_list <- file_list[1:(no_files-1)]
#read all files and melt into one long table with only relevant information
for (file_index in 1:(no_files-1)) {
temp_file <- read.csv(file_list[[file_index]])
reduced_file <- subset(temp_file, select = c(surface, winner_id, loser_id))
if (file_index==1) {
melted_files <- reduced_file
} else {
melted_files <- rbind(melted_files, reduced_file)
}
}
data <- melted_files
list_types <- c("Grass", "Clay", "Carpet", "Hard"))
list_types <- c("Grass", "Clay", "Carpet", "Hard")
counts <- rep(0, length(list_types)+1)
counts <- as.data.frame(counts)
row.names(counts) <- c(list_types, "Other")
other_indexes <- 0
i=1
flag = FALSE
for (j in 1:length(list_types)) {
if(data$surface[i]==list_types[j]) {
flag = TRUE
counts$list_types[j] = counts$list_types[j] + 1
}
}
length(list_types)
list_types[3]
data$surface[i]
data$surface[i]==list_types[2]
data$surface[i]==list_types[1]
data$surface[i]==list_types[3]
data$surface[i]==list_types[4]
counts
for (j in 1:length(list_types)) {
if(data$surface[i]==list_types[j]) {
flag = TRUE
counts$list_types[j] = counts$list_types[j] + 1
}
}
counts
counts$list_types[2]
counts$list_types[3]
counts
list_types[2]
counts$"Clay"
counts$Clay
counts$clay
counts
counts$Grass
counts$counts
counts$counts[1]
counts[3]
counts <- t(as.data.frame(counts))
colnames(counts) <- c(list_types, "Other")
counts$Grass
coiunts
counts
counts <- as.data.frame(t(counts))
counts
counts <- t(rep(0, length(list_types)+1))
counts
counts <- as.data.frame(counts)
counts
counts <- t(rep(0, length(list_types)+1))
counts <- as.data.frame(counts)
colnames(counts) <- c(list_types, "Other")
other_indexes <- 0
counts$Grass
counts$Clay
i=1
flag = FALSE
for (j in 1:length(list_types)) {
if(data$surface[i]==list_types[j]) {
flag = TRUE
counts$list_types[j] = counts$list_types[j] + 1
}
}
counts
flag = FALSE
for (j in 1:length(list_types)) {
if(data$surface[i]==list_types[j]) {
print("hi")
flag = TRUE
counts$list_types[j] = counts$list_types[j] + 1
}
}
counts
list_types[2]
data$surface[i]
which(data$surface != list_types)
list_types
which(data$surface == list_types[1])
surfaces_data <- function(data, list_types){
new_data <- data[which(data$surface == list_types[1])]
for (i in 2:length(list_types)){
new_data <- rbind(new_data, data[which(data$surface == list_types[i])])
}
return(as.matrix(new_data))
}
surfaces_data(data,list_types)
data[1,]
new_data <- rbind(new_data, data[which(data$surface == list_types[i]),])
surfaces_data <- function(data, list_types){
new_data <- data[which(data$surface == list_types[1])]
for (i in 2:length(list_types)){
new_data <- rbind(new_data, data[which(data$surface == list_types[i]),])
}
return(as.matrix(new_data))
}
surfaces_data(data,list_types)
new_data <- data[which(data$surface == list_types[1]),]
new_data
surfaces_data <- function(data, list_types){
new_data <- data[which(data$surface == list_types[1]),]
for (i in 2:length(list_types)){
new_data <- rbind(new_data, data[which(data$surface == list_types[i]),])
}
return(as.matrix(new_data))
}
surfaces_data(data,list_types)
x <- surfaces_data(data,list_types)
View(x)
new_data
surfaces_data <- function(data, list_types){
new_data <- data[which(data$surface == list_types[1]),]
for (i in 2:length(list_types)){
new_data <- rbind(new_data, data[which(data$surface == list_types[i]),])
}
new_data
return(new_data)
}
x <- surfaces_data(data,list_types)
x
list(1:4)
surfs <- c("Grass", "Clay", "Hard", "Carpet")
no_surfs <- length(surfs)
broken_data <- vector("list", no_surfs)
for (i in 1:no_surfs) {
broken_data[[i]] <- data[which(data$surface == surfs[1]),]
}
setwd("~/Documents/PhD/First Year/Statistical Computing/tennis_wta/tennis_wta/rel_files")
file_list = list.files(pattern="*.csv")
no_files <- length(file_list)
test_file <- file_list[[no_files]]
file_list <- file_list[1:(no_files-1)]
#read all files and melt into one long table with only relevant information
for (file_index in 1:(no_files-1)) {
temp_file <- read.csv(file_list[[file_index]])
reduced_file <- subset(temp_file, select = c(surface, winner_id, loser_id))
if (file_index==1) {
melted_files <- reduced_file
} else {
melted_files <- rbind(melted_files, reduced_file)
}
}
#break the data up into the different surfaces
surfs <- c("Grass", "Clay", "Hard", "Carpet")
no_surfs <- length(surfs)
broken_data <- vector("list", no_surfs)
for (i in 1:no_surfs) {
broken_data[[i]] <- data[which(data$surface == surfs[1]),]
}
surfs <- c("Grass", "Clay", "Hard", "Carpet")
no_surfs <- length(surfs)
broken_data <- vector("list", no_surfs)
for (i in 1:no_surfs) {
broken_data[[i]] <- data[which(data$surface == surfs[1]),]
}
#break the data up into the different surfaces
surfs <- c("Grass", "Clay", "Hard", "Carpet")
no_surfs <- length(surfs)
broken_data <- vector("list", no_surfs)
no_surfs
i=1
broken_data[[i]] <- data[which(data$surface == surfs[1]),]
data[which(data$surface == surfs[1]),]
broken_data[[i]] <- melted_files[which(melted_files$surface == surfs[1]),]
for (i in 1:no_surfs) {
broken_data[[i]] <- melted_files[which(melted_files$surface == surfs[1]),]
}
broken_data
matrix(0,3,3,3)
array(0,3,3)
array(0,3,3, 3)
array(0,c(3,3,3))
#initialise the variables
w <- array(0, c(no_players, no_players, no_surfs))
#initialise the variables
w <- array(0, c(no_players, no_players, no_surfs))
setwd("~/Documents/PhD/First Year/Statistical Computing/tennis_wta/tennis_wta/rel_files")
file_list = list.files(pattern="*.csv")
no_files <- length(file_list)
test_file <- file_list[[no_files]]
file_list <- file_list[1:(no_files-1)]
#read all files and melt into one long table with only relevant information
for (file_index in 1:(no_files-1)) {
temp_file <- read.csv(file_list[[file_index]])
reduced_file <- subset(temp_file, select = c(surface, winner_id, loser_id))
if (file_index==1) {
melted_files <- reduced_file
} else {
melted_files <- rbind(melted_files, reduced_file)
}
}
#load the test file
reduced_test_file <- subset(read.csv(test_file), select = c(surface, winner_id, loser_id))
#break the data up into the different surfaces
surfs <- c("Grass", "Clay", "Hard", "Carpet")
no_surfs <- length(surfs)
broken_data <- vector("list", no_surfs)
for (i in 1:no_surfs) {
broken_data[[i]] <- melted_files[which(melted_files$surface == surfs[1]),]
}
#find the players
players <- unique(c(melted_files$winner_id, melted_files$loser_id))
no_players <- length(players)
w <- array(0, c(no_players, no_players, no_surfs))
#initialise the variables
w <- array(0, c(no_players, no_players, no_surfs))
#w <- as.data.frame(w)
row.names(w) <- players
w]
w
w[1:10, 1:10, 1]
w[1:10, 1:10, 2]
colnames(w) <- row.names(w)
broken_data
broken_data[[1]][1:10,]
broken_data[[2]][1:10,]
for (i in 1:no_surfs) {
broken_data[[i]] <- melted_files[which(melted_files$surface == surfs[i]),]
}
broken_data[[2]][1:10,]
broken_data[[1]][1:10,]
players
length(players)
length(unique(players))
#function to fill in w matrix
w_fill <- function(data_mat, players) {
no_players <- length(players)
w <- matrix(0, no_players, no_players)
for (i in 1:no_players) {
player <- players[i]
win_ind <- which(row.names(w)==player)
los_ids <- data_mat$loser_id[which(data_mat$winner_id==player)]
for (j in 1:length(los_ids)) {
loser <- los_ids[j]
los_ind <- which(players==loser)
w[win_ind, los_ind] <- w[win_ind, los_ind] + 1
}
}
return(w)
}
#fill in the matrices
for (j in 1:no_surfs) {
w[,,j] <- fill_w(broken_data[[j]], players)
}
#fill in the matrices
for (j in 1:no_surfs) {
w[,,j] <- w_fill(broken_data[[j]], players)
}
t(w)
for (j in 1:no_surfs) {
w[,,j] <- w_fill(broken_data[[j]], players)
n[,,j] <- w[,,j] + t(w[,,j])
}
n <- array(0, c(no_players, no_players, no_surfs))
#fill in the matrices
for (j in 1:no_surfs) {
w[,,j] <- w_fill(broken_data[[j]], players)
n[,,j] <- w[,,j] + t(w[,,j])
}
